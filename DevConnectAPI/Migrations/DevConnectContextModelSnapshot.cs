// <auto-generated />
using System;
using DevConnectAPI.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DevConnectAPI.Migrations
{
    [DbContext(typeof(DevConnectContext))]
    partial class DevConnectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DevConnectAPI.Models.BlockList", b =>
                {
                    b.Property<int>("relation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockId")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("relation_id");

                    b.HasIndex("BlockId");

                    b.HasIndex("user_id");

                    b.ToTable("BlockList");
                });

            modelBuilder.Entity("DevConnectAPI.Models.FriendRequests", b =>
                {
                    b.Property<int>("relation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("relation_id");

                    b.HasIndex("RequestId");

                    b.HasIndex("user_id");

                    b.ToTable("FriendRequests");
                });

            modelBuilder.Entity("DevConnectAPI.Models.Friends", b =>
                {
                    b.Property<int>("relation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FriendId")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("relation_id");

                    b.HasIndex("FriendId");

                    b.HasIndex("user_id");

                    b.ToTable("Friends");
                });

            modelBuilder.Entity("DevConnectAPI.Models.Location", b =>
                {
                    b.Property<int>("location_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("location_id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DevConnectAPI.Models.Message", b =>
                {
                    b.Property<int>("message_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Read")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("senderuser_id")
                        .HasColumnType("int");

                    b.HasKey("message_id");

                    b.HasIndex("senderuser_id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DevConnectAPI.Models.Photo", b =>
                {
                    b.Property<int>("photo_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int>("album_id")
                        .HasColumnType("int");

                    b.Property<string>("caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("img_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("owneruser_id")
                        .HasColumnType("int");

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.HasKey("photo_id");

                    b.HasIndex("album_id")
                        .IsUnique();

                    b.HasIndex("owneruser_id");

                    b.HasIndex("post_id");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("DevConnectAPI.Models.PhotoAlbum", b =>
                {
                    b.Property<int>("album_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("owneruser_id")
                        .HasColumnType("int");

                    b.HasKey("album_id");

                    b.HasIndex("owneruser_id");

                    b.ToTable("PhotoAlbums");
                });

            modelBuilder.Entity("DevConnectAPI.Models.Post", b =>
                {
                    b.Property<int>("post_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Owneruser_id")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("post_id");

                    b.HasIndex("Owneruser_id");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("DevConnectAPI.Models.PostComment", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Owneruser_id")
                        .HasColumnType("int");

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("comment_id");

                    b.HasIndex("Owneruser_id");

                    b.HasIndex("post_id");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("DevConnectAPI.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Parentuser_id")
                        .HasColumnType("int");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("verificationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.HasIndex("Parentuser_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DevConnectAPI.Models.UserLike", b =>
                {
                    b.Property<int>("like_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PostCommentcomment_id")
                        .HasColumnType("int");

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("like_id");

                    b.HasIndex("PostCommentcomment_id");

                    b.HasIndex("post_id");

                    b.HasIndex("user_id");

                    b.ToTable("UserLikes");
                });

            modelBuilder.Entity("DevConnectAPI.Models.UserMessage", b =>
                {
                    b.Property<int>("user_message_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("message_id")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("user_message_id");

                    b.HasIndex("message_id");

                    b.HasIndex("user_id");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("DevConnectAPI.Models.UserProfile", b =>
                {
                    b.Property<int>("profile_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserStatusstatus_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("profile_id");

                    b.HasIndex("UserStatusstatus_id");

                    b.HasIndex("user_id")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("DevConnectAPI.Models.UserStatus", b =>
                {
                    b.Property<int>("status_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("status_id");

                    b.HasIndex("user_id");

                    b.ToTable("UserStatuses");
                });

            modelBuilder.Entity("DevConnectAPI.WorkPlace", b =>
                {
                    b.Property<int>("workplace_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserProfileprofile_id")
                        .HasColumnType("int");

                    b.Property<int?>("WorkLocationlocation_id")
                        .HasColumnType("int");

                    b.HasKey("workplace_id");

                    b.HasIndex("UserProfileprofile_id");

                    b.HasIndex("WorkLocationlocation_id");

                    b.ToTable("WorkPlaces");
                });

            modelBuilder.Entity("DevConnectAPI.Models.BlockList", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "block")
                        .WithMany()
                        .HasForeignKey("BlockId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevConnectAPI.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevConnectAPI.Models.FriendRequests", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevConnectAPI.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevConnectAPI.Models.Friends", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DevConnectAPI.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevConnectAPI.Models.Message", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "sender")
                        .WithMany()
                        .HasForeignKey("senderuser_id");
                });

            modelBuilder.Entity("DevConnectAPI.Models.Photo", b =>
                {
                    b.HasOne("DevConnectAPI.Models.PhotoAlbum", "Album")
                        .WithOne("CoverPhoto")
                        .HasForeignKey("DevConnectAPI.Models.Photo", "album_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevConnectAPI.Models.User", "owner")
                        .WithMany()
                        .HasForeignKey("owneruser_id");

                    b.HasOne("DevConnectAPI.Models.Post", null)
                        .WithMany("images")
                        .HasForeignKey("post_id");
                });

            modelBuilder.Entity("DevConnectAPI.Models.PhotoAlbum", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "owner")
                        .WithMany()
                        .HasForeignKey("owneruser_id");
                });

            modelBuilder.Entity("DevConnectAPI.Models.Post", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("Owneruser_id");
                });

            modelBuilder.Entity("DevConnectAPI.Models.PostComment", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "Owner")
                        .WithMany()
                        .HasForeignKey("Owneruser_id");

                    b.HasOne("DevConnectAPI.Models.Post", "post")
                        .WithMany()
                        .HasForeignKey("post_id");
                });

            modelBuilder.Entity("DevConnectAPI.Models.User", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "Parent")
                        .WithMany("friends_list")
                        .HasForeignKey("Parentuser_id");
                });

            modelBuilder.Entity("DevConnectAPI.Models.UserLike", b =>
                {
                    b.HasOne("DevConnectAPI.Models.PostComment", null)
                        .WithMany("Likes")
                        .HasForeignKey("PostCommentcomment_id");

                    b.HasOne("DevConnectAPI.Models.Post", null)
                        .WithMany("likes")
                        .HasForeignKey("post_id");

                    b.HasOne("DevConnectAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("DevConnectAPI.Models.UserMessage", b =>
                {
                    b.HasOne("DevConnectAPI.Models.Message", "message")
                        .WithMany()
                        .HasForeignKey("message_id");

                    b.HasOne("DevConnectAPI.Models.User", "user")
                        .WithMany("Messages")
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("DevConnectAPI.Models.UserProfile", b =>
                {
                    b.HasOne("DevConnectAPI.Models.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusstatus_id");

                    b.HasOne("DevConnectAPI.Models.User", "user")
                        .WithOne("userProfile")
                        .HasForeignKey("DevConnectAPI.Models.UserProfile", "user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevConnectAPI.Models.UserStatus", b =>
                {
                    b.HasOne("DevConnectAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("DevConnectAPI.WorkPlace", b =>
                {
                    b.HasOne("DevConnectAPI.Models.UserProfile", null)
                        .WithMany("EmploymentHistory")
                        .HasForeignKey("UserProfileprofile_id");

                    b.HasOne("DevConnectAPI.Models.Location", "WorkLocation")
                        .WithMany()
                        .HasForeignKey("WorkLocationlocation_id");
                });
#pragma warning restore 612, 618
        }
    }
}
